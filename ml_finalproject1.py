# -*- coding: utf-8 -*-
"""ML_finalproject1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zwo74Mk0oCaHVBGh70dk5OZeP4iBGMT2
"""

import pandas as pd
import numpy as np
import statistics
from statistics import mode
import math
from collections import Counter

file1=pd.read_csv("/content/seeds_dataset.txt",delim_whitespace=True,header=None)
print(file1)
x=file1.iloc[:,:-1].values
y=file1.iloc[:,-1].values
print(x)

for i in range(0,len(x)):
  for j in range(0,len(x[0])):
    x[i][j]=float(x[i][j])
print(x)

def find_avgcluster_matrix(matrix_x):
  if np.min(matrix_x)==100000.0:
    print("no more cluster possible")
  else:
    cluster=np.where(matrix_x==np.min(matrix_x))
    cluster=np.squeeze(cluster)
    cluster=np.sort(cluster)
    ar1=list(matrix_x[cluster[0]])
    ar2=list(matrix_x[cluster[1]])
    ac1=[item[cluster[0]] for item in matrix_x]
    ac2=[item[cluster[1]] for item in matrix_x]
    for i in range(0,len(ar1)):
      if ar1[i]!=100000.0 and ar2[i]!=100000.0:
        mini=[]
        mini.append(ar1[i])
        mini.append(ar2[i])
        ar1[i]=(mini[0]+mini[1])/2
    for i in range(0,len(ar1)):
      if ac1[i]!=100000.0 and ar2[i]!=100000.0:
        mini=[]
        mini.append(ac1[i])
        mini.append(ar2[i])
        ac1[i]=(mini[0]+mini[1])/2
    for i in range(0,len(ar1)):
      if ac1[i]!=100000.0 and ac2[i]!=100000.0:
        mini=[]
        mini.append(ac1[i])
        mini.append(ac2[i])
        ac1[i]=(mini[0]+mini[1])/2
    for i in range(0,len(ar1)):
      matrix_x[cluster[1],i]=100000.0
    for i in range(0,len(ac1)):
      matrix_x[i,cluster[1]]=100000.0
    kp=ac1[cluster[1]]
    for i in range(0,len(ac1)):
      if ac1[i]==kp:
        ac1[i]=100000.0
    for i in range(0,len(ar1)):
      matrix_x[cluster[0],i]=ar1[i]
    for i in range(0,len(ac1)):
      matrix_x[i,cluster[0]]=ac1[i]
    return matrix_x,cluster;

def find_avgcluster(x,clustno):
  clust=[]
  k=len(x)
  matrix_x=np.zeros((k,k))
  for i in range(0,len(matrix_x)):
    for j in range(0,len(matrix_x)):
      if i>j:
        matrix_x[i,j]=float(np.linalg.norm(np.array(x[i])-np.array(x[j])))
      else:
        matrix_x[i,j]=100000
  for po in range (0,len(matrix_x)-1):
    matrix_x,cluster=find_avgcluster_matrix(matrix_x)
    cluster=list(cluster)
    k1=0
    for item in clust:
      for k in range(0,len(item)):
        if item[k]==cluster[0]:
          item.append(cluster[1])
          k1=1
          break
        if item[k]==cluster[1]:
          item.append(cluster[0])
          k1=1
          break
    if k1==0:
      clust.append(cluster)
    merge=[]
    for item in clust:
      pi=0
      for k in range(0,len(item)):
        if item[k]==cluster[0] or item[k]==cluster[1]:
          pi=pi+1
      if pi==2:
        merge.append(clust.index(item))
    if len(merge)==2:
      clust[merge[0]]=clust[merge[0]]+clust[merge[1]]
      clust.remove(clust[merge[1]])
    for i in range (0,len(clust)):
      uniq1=clust[i]
      uniq1=np.asarray(uniq1)
      uniq1=np.unique(uniq1)
      clust[i]=list(uniq1)
    clno=len(matrix_x)-po-1
    if clustno==clno:
      clusti2=[]
      for item in clust:
        for i in range(0,len(item)):
          clusti2.append(item[i])
      for i in range(0,len(x)):
        k=0
        for j in range(0,len(clusti2)):
          if i==clusti2[j]:
            k=1
        if k==0:
          clust.append([i])
      return clust

def find_avgcluster_matrix(matrix_x):
  if np.min(matrix_x)==100000.0:
    print("no more cluster possible")
  else:
    cluster=np.where(matrix_x==np.min(matrix_x))
    cluster=np.squeeze(cluster)
    cluster=np.sort(cluster)
    ar1=list(matrix_x[cluster[0]])
    ar2=list(matrix_x[cluster[1]])
    ac1=[item[cluster[0]] for item in matrix_x]
    ac2=[item[cluster[1]] for item in matrix_x]
    for i in range(0,len(ar1)):
      if ar1[i]!=100000.0 and ar2[i]!=100000.0:
        mini=[]
        mini.append(ar1[i])
        mini.append(ar2[i])
        ar1[i]=(mini[0]+mini[1])/2
    for i in range(0,len(ar1)):
      if ac1[i]!=100000.0 and ar2[i]!=100000.0:
        mini=[]
        mini.append(ac1[i])
        mini.append(ar2[i])
        ac1[i]=(mini[0]+mini[1])/2
    for i in range(0,len(ar1)):
      if ac1[i]!=100000.0 and ac2[i]!=100000.0:
        mini=[]
        mini.append(ac1[i])
        mini.append(ac2[i])
        ac1[i]=(mini[0]+mini[1])/2
    for i in range(0,len(ar1)):
      matrix_x[cluster[1],i]=100000.0
    for i in range(0,len(ac1)):
      matrix_x[i,cluster[1]]=100000.0
    kp=ac1[cluster[1]]
    for i in range(0,len(ac1)):
      if ac1[i]==kp:
        ac1[i]=100000.0
    for i in range(0,len(ar1)):
      matrix_x[cluster[0],i]=ar1[i]
    for i in range(0,len(ac1)):
      matrix_x[i,cluster[0]]=ac1[i]
    return matrix_x,cluster;

def find_avgcluster(x,clustno):
  clust=[]
  k=len(x)
  matrix_x=np.zeros((k,k))
  for i in range(0,len(matrix_x)):
    for j in range(0,len(matrix_x)):
      if i>j:
        matrix_x[i,j]=float(np.linalg.norm(np.array(x[i])-np.array(x[j])))
      else:
        matrix_x[i,j]=100000
  for po in range (0,len(matrix_x)-1):
    matrix_x,cluster=find_avgcluster_matrix(matrix_x)
    cluster=list(cluster)
    k1=0
    for item in clust:
      for k in range(0,len(item)):
        if item[k]==cluster[0]:
          item.append(cluster[1])
          k1=1
          break
        if item[k]==cluster[1]:
          item.append(cluster[0])
          k1=1
          break
    if k1==0:
      clust.append(cluster)
    merge=[]
    for item in clust:
      pi=0
      for k in range(0,len(item)):
        if item[k]==cluster[0] or item[k]==cluster[1]:
          pi=pi+1
      if pi==2:
        merge.append(clust.index(item))
    if len(merge)==2:
      clust[merge[0]]=clust[merge[0]]+clust[merge[1]]
      clust.remove(clust[merge[1]])
    for i in range (0,len(clust)):
      uniq1=clust[i]
      uniq1=np.asarray(uniq1)
      uniq1=np.unique(uniq1)
      clust[i]=list(uniq1)
    clno=len(matrix_x)-po-1
    if clustno==clno:
      clusti2=[]
      for item in clust:
        for i in range(0,len(item)):
          clusti2.append(item[i])
      for i in range(0,len(x)):
        k=0
        for j in range(0,len(clusti2)):
          if i==clusti2[j]:
            k=1
        if k==0:
          clust.append([i])
      return clust

def predict1(intt,clustfea,testin,y,k):
  dist=[]
  test1=list(intt[testin])
  testclust=clustfea[testin]
  for i in range(0,len(intt)):
    ki1=list(intt[i])
    ki2=clustfea[i]
    distance=0
    for j in range(0,len(intt[0])):
      point1=np.square(float(ki1[j])-float(test1[j]))
      distance=distance+point1
    for j in range(0,len(clustfea[0])):
      point1=np.square(float(ki2[j])-float(testclust[j]))
      distance=distance+point1
    distance=np.sqrt(distance)
    dist.append(distance)
  dist_sort=sorted(dist)
  k1=dist_sort[:k]
  neigh=[]
  for i in k1:
    for j in dist:
      if i==j:
        neigh.append(dist.index(i))
  p=[]
  for i in neigh:
    p.append(y[i])
  return mode(p)

def predict2(intt,clustfea,test1,testclust,y,k):
  dist=[]
  for i in range(0,len(intt)):
    ki1=list(intt[i])
    ki2=clustfea[i]
    distance=0
    for j in range(0,len(intt[0])):
      point1=np.square(float(ki1[j])-float(test1[j]))
      distance=distance+point1
    for j in range(0,len(clustfea[0])):
      point1=np.square(float(ki2[j])-float(testclust[j]))
      distance=distance+point1
    distance=np.sqrt(distance)
    dist.append(distance)
  dist_sort=sorted(dist)
  k1=dist_sort[:k]
  neigh=[]
  for i in k1:
    for j in dist:
      if i==j:
        neigh.append(dist.index(i))
  p=[]
  for i in neigh:
    p.append(y[i])
  return mode(p)

def predict(intt,test1,y,k):
  dist=[]
  for i in range(0,len(intt)):
    ki1=list(intt[i])
    distance=0
    for j in range(0,len(intt[0])):
      point1=np.square(float(ki1[j])-float(test1[j]))
      distance=distance+point1
    distance=np.sqrt(distance)
    dist.append(distance)
  dist_sort=sorted(dist)
  k1=dist_sort[:k]
  neigh=[]
  for i in k1:
    for j in dist:
      if i==j:
        neigh.append(dist.index(i))
  p=[]
  for i in neigh:
    p.append(y[i])
  modep1=findmultimode(p)
  return modep1

def findknn(ki):
  split1=len(file1)-30
  x=file1.iloc[:split1,:-1].values
  y=file1.iloc[:split1,-1].values
  x_test=file1.iloc[split1:,:-1].values
  y_test=file1.iloc[split1:,-1].values
  print("actual y without using cluster")
  print(y_test)
  yclust5=[]
  for i in range(0,len(x_test)):
    kp1=predict(x,list(x_test[i]),y,ki)
    yclust5.append(kp1)
  yclust5=np.asarray(yclust5)
  print("predicted y without using cluster")
  print(yclust5)
  count1=0
  for i in range(0,len(y_test)):
    if y_test[i]==yclust5[i]:
      count1=count1+1
  accuracy1=float(count1)/float(len(y_test))
  print("accuracy for without using cluster") 
  print(accuracy1)
  print(" ")

def findmultimode(p):
  modep=[]
  p1=Counter(p)
  q1=p1.most_common(1)[0][1]
  for item in p1:
    if p.count(item)==q1:
      modep.append(item)
  modep=list(set(modep))
  return modep[0]

def findclusteraccuracyavg(clustno):
  file1=pd.read_csv("/content/seeds_dataset.txt",delim_whitespace=True,header=None)
  y=file1.iloc[:,-1].values
  clust=find_avgcluster(x,clustno)
  clustp=file1.iloc[:,-1].values
  clusted=[]
  for i in range(0,len(clust)):
    clust1=[]
    for j in range(0,len(clust[i])):
      clust1.append(y[clust[i][j]])
    clusted.append(clust1)
  vote=[]
  for i in range(0,len(clusted)):
    kg1=findmultimode(clusted[i])
    vote.append(kg1)
  for i in range(0,len(clust)):
    for j in range(0,len(clust[i])):
      clustp[clust[i][j]]=vote[i]

  count1=0
  file1=pd.read_csv("/content/seeds_dataset.txt",delim_whitespace=True,header=None)
  y=file1.iloc[:,-1].values

  for i in range(0,len(y)):
    if y[i]==clustp[i]:
      count1=count1+1
  accuracy1=float(count1)/float(len(y))
  return accuracy1

def findbestclusteravg(x):
  accu=[]
  for i in range(1,len(x)):
    accu.append(findclusteraccuracyavg(i))
  for i in range(0,len(accu)):
    if accu[i]>=0.9:
      return i+1
      break

def findaccuracyavglink(ki1):
  x=file1.iloc[:,:-1].values
  y=file1.iloc[:,-1].values
  clustno=findbestclusteravg(x)
  print("a good cluster is")
  print(clustno)
  clust5=find_avgcluster(x,clustno)
  avgclustpoint=[]
  for i in range(0,len(clust5)):
    clustp=[]
    for j in range(0,len(x[0])):
      a12=0
      for k in range(0,len(clust5[i])):
        kp=x[clust5[i][k]]
        kp1=kp[j]
        a12=a12+kp1
      a12=a12/len(clust5[i])
      clustp.append(a12)
    avgclustpoint.append(clustp)
  clustfeature=[]
  for i in range(0,len(avgclustpoint)):
    cluster1=[]
    for j in range(0,len(x)):
      datapoint=x[j]
      distance=0
      clustpoint=avgclustpoint[i]
      for k in range(0,len(datapoint)):
        point1=np.square(float(clustpoint[k])-float(datapoint[k]))
        distance=distance+point1
      distance=np.sqrt(distance)
      cluster1.append(distance)
    clustfeature.append(cluster1)
  clustfeature1=[]
  for i in range(0,len(x)):
    clust123=[]
    for j in range(0,len(clustfeature)):
      uv=clustfeature[j][i]
      clust123.append(uv)
    clustfeature1.append(clust123)
  split1=len(file1)-30
  clustfeaturetrain1=clustfeature1[:split1]
  clustfeaturetest1=clustfeature1[split1:]
  x=file1.iloc[:split1,:-1].values
  y=file1.iloc[:split1,-1].values
  x_test=file1.iloc[split1:,:-1].values
  y_test=file1.iloc[split1:,-1].values
  yclust5=[]
  for i in range(0,len(x_test)):
    kp1=predict2(x,clustfeaturetrain1,list(x_test[i]),clustfeaturetest1[i],y,ki1)
    yclust5.append(kp1)
  yclust5=np.asarray(yclust5)
  print("actutal y")
  print(y_test)
  print("predicted y")
  print(yclust5)
  count1=0
  for i in range(0,len(y_test)):
    if y_test[i]==yclust5[i]:
      count1=count1+1
  accuracy1=float(count1)/float(len(y_test))
  print("accuracy for "+str(clustno)+" cluster") 
  print(accuracy1)
  print(" ")

findknn(3)
findknn(5)
findknn(7)

findaccuracyavglink(3)
findaccuracyavglink(5)
findaccuracyavglink(7)

def findaccuracyavglink1(ki1):
  x=file1.iloc[:,:-1].values
  y=file1.iloc[:,-1].values
  clustno=findbestclusteravg(x)
  print("a good cluster is")
  print(clustno)
  clust5=find_avgcluster(x,clustno)
  print(clust5)
  avgclustpoint=[]
  for i in range(0,len(clust5)):
    clustp=[]
    for j in range(0,len(x[0])):
      a12=0
      for k in range(0,len(clust5[i])):
        kp=x[clust5[i][k]]
        kp1=kp[j]
        a12=a12+kp1
      a12=a12/len(clust5[i])
      clustp.append(a12)
    avgclustpoint.append(clustp)
  clustfeature=[]
  for i in range(0,len(avgclustpoint)):
    cluster1=[]
    for j in range(0,len(x)):
      datapoint=x[j]
      distance=0
      clustpoint=avgclustpoint[i]
      for k in range(0,len(datapoint)):
        point1=np.square(float(clustpoint[k])-float(datapoint[k]))
        distance=distance+point1
      distance=np.sqrt(distance)
      cluster1.append(distance)
    clustfeature.append(cluster1)
  clustfeature1=[]
  for i in range(0,len(x)):
    clust123=[]
    for j in range(0,len(clustfeature)):
      uv=clustfeature[j][i]
      clust123.append(uv)
    clustfeature1.append(clust123)
  yclust5=[]
  for i in range(0,len(x)):
    kp1=predict1(x,clustfeature1,i,y,ki1)
    yclust5.append(kp1)
  yclust5=np.asarray(yclust5)
  print("actutal y")
  print(y)
  print("predicted y")
  print(yclust5)
  count1=0
  for i in range(0,len(y)):
    if y[i]==yclust5[i]:
      count1=count1+1
  accuracy1=float(count1)/float(len(y))
  print("accuracy for "+str(clustno)+" cluster") 
  print(accuracy1)
  print(" ")

findaccuracyavglink1(3)
findaccuracyavglink1(5)
findaccuracyavglink1(7)

def find_mincluster_matrix(matrix_x):
  if np.min(matrix_x)==100000.0:
    print("no more cluster possible")
  else:
    cluster=np.where(matrix_x==np.min(matrix_x))
    cluster=np.squeeze(cluster)
    cluster=np.sort(cluster)
    ar1=list(matrix_x[cluster[0]])
    ar2=list(matrix_x[cluster[1]])
    ac1=[item[cluster[0]] for item in matrix_x]
    ac2=[item[cluster[1]] for item in matrix_x]
    for i in range(0,len(ar1)):
      if ar1[i]!=100000.0 and ar2[i]!=100000.0:
        mini=[]
        mini.append(ar1[i])
        mini.append(ar2[i])
        ar1[i]=min(mini)
    for i in range(0,len(ar1)):
      if ac1[i]!=100000.0 and ar2[i]!=100000.0:
        mini=[]
        mini.append(ac1[i])
        mini.append(ar2[i])
        ac1[i]=min(mini)
    for i in range(0,len(ar1)):
      if ac1[i]!=100000.0 and ac2[i]!=100000.0:
        mini=[]
        mini.append(ac1[i])
        mini.append(ac2[i])
        ac1[i]=min(mini)
    for i in range(0,len(ar1)):
      matrix_x[cluster[1],i]=100000.0
    for i in range(0,len(ac1)):
      matrix_x[i,cluster[1]]=100000.0
    kp=ac1[cluster[1]]
    for i in range(0,len(ac1)):
      if ac1[i]==kp:
        ac1[i]=100000.0
    for i in range(0,len(ar1)):
      matrix_x[cluster[0],i]=ar1[i]
    for i in range(0,len(ac1)):
      matrix_x[i,cluster[0]]=ac1[i]
    return matrix_x,cluster;

def find_mincluster(x,clustno):
  clust=[]
  k=len(x)
  matrix_x=np.zeros((k,k))
  for i in range(0,len(matrix_x)):
    for j in range(0,len(matrix_x)):
      if i>j:
        matrix_x[i,j]=float(np.linalg.norm(np.array(x[i])-np.array(x[j])))
      else:
        matrix_x[i,j]=100000
  for po in range (0,len(matrix_x)-1):
    matrix_x,cluster=find_mincluster_matrix(matrix_x)
    cluster=list(cluster)
    k1=0
    for item in clust:
      for k in range(0,len(item)):
        if item[k]==cluster[0]:
          item.append(cluster[1])
          k1=1
          break
        if item[k]==cluster[1]:
          item.append(cluster[0])
          k1=1
          break
    if k1==0:
      clust.append(cluster)
    merge=[]
    for item in clust:
      pi=0
      for k in range(0,len(item)):
        if item[k]==cluster[0] or item[k]==cluster[1]:
          pi=pi+1
      if pi==2:
        merge.append(clust.index(item))
    if len(merge)==2:
      clust[merge[0]]=clust[merge[0]]+clust[merge[1]]
      clust.remove(clust[merge[1]])
    for i in range (0,len(clust)):
      uniq1=clust[i]
      uniq1=np.asarray(uniq1)
      uniq1=np.unique(uniq1)
      clust[i]=list(uniq1)
    clno=len(matrix_x)-po-1
    if clustno==clno:
      clusti2=[]
      for item in clust:
        for i in range(0,len(item)):
          clusti2.append(item[i])
      for i in range(0,len(x)):
        k=0
        for j in range(0,len(clusti2)):
          if i==clusti2[j]:
            k=1
        if k==0:
          clust.append([i])
      return clust

def findclusteraccuracymin(clustno):
  file1=pd.read_csv("/content/seeds_dataset.txt",delim_whitespace=True,header=None)
  y=file1.iloc[:,-1].values
  clust=find_mincluster(x,clustno)
  clustp=file1.iloc[:,-1].values
  clusted=[]
  for i in range(0,len(clust)):
    clust1=[]
    for j in range(0,len(clust[i])):
      clust1.append(y[clust[i][j]])
    clusted.append(clust1)
  vote=[]
  for i in range(0,len(clusted)):
    kg1=findmultimode(clusted[i])
    vote.append(kg1)
  for i in range(0,len(clust)):
    for j in range(0,len(clust[i])):
      clustp[clust[i][j]]=vote[i]

  count1=0
  file1=pd.read_csv("/content/seeds_dataset.txt",delim_whitespace=True,header=None)
  y=file1.iloc[:,-1].values

  for i in range(0,len(y)):
    if y[i]==clustp[i]:
      count1=count1+1
  accuracy1=float(count1)/float(len(y))
  return accuracy1

def findbestclustermin(x):
  accu=[]
  for i in range(1,len(x)):
    accu.append(findclusteraccuracymin(i))
  for i in range(0,len(accu)):
    if accu[i]>=0.9:
      return i+1
      break

def findaccuracyminlink(ki1):
  x=file1.iloc[:,:-1].values
  y=file1.iloc[:,-1].values
  clustno=findbestclustermin(x)
  print("a good cluster is")
  print(clustno)
  clust5=find_mincluster(x,clustno)
  avgclustpoint=[]
  for i in range(0,len(clust5)):
    clustp=[]
    for j in range(0,len(x[0])):
      a12=0
      for k in range(0,len(clust5[i])):
        kp=x[clust5[i][k]]
        kp1=kp[j]
        a12=a12+kp1
      a12=a12/len(clust5[i])
      clustp.append(a12)
    avgclustpoint.append(clustp)
  clustfeature=[]
  for i in range(0,len(avgclustpoint)):
    cluster1=[]
    for j in range(0,len(x)):
      datapoint=x[j]
      distance=0
      clustpoint=avgclustpoint[i]
      for k in range(0,len(datapoint)):
        point1=np.square(float(clustpoint[k])-float(datapoint[k]))
        distance=distance+point1
      distance=np.sqrt(distance)
      cluster1.append(distance)
    clustfeature.append(cluster1)
  clustfeature1=[]
  for i in range(0,len(x)):
    clust123=[]
    for j in range(0,len(clustfeature)):
      uv=clustfeature[j][i]
      clust123.append(uv)
    clustfeature1.append(clust123)
  split1=len(file1)-30
  clustfeaturetrain1=clustfeature1[:split1]
  clustfeaturetest1=clustfeature1[split1:]
  x=file1.iloc[:split1,:-1].values
  y=file1.iloc[:split1,-1].values
  x_test=file1.iloc[split1:,:-1].values
  y_test=file1.iloc[split1:,-1].values
  yclust5=[]
  for i in range(0,len(x_test)):
    kp1=predict2(x,clustfeaturetrain1,list(x_test[i]),clustfeaturetest1[i],y,ki1)
    yclust5.append(kp1)
  yclust5=np.asarray(yclust5)
  print("actutal y")
  print(y_test)
  print("predicted y")
  print(yclust5)
  count1=0
  for i in range(0,len(y_test)):
    if y_test[i]==yclust5[i]:
      count1=count1+1
  accuracy1=float(count1)/float(len(y_test))
  print("accuracy for "+str(clustno)+" cluster") 
  print(accuracy1)
  print(" ")

findknn(3)
findknn(5)
findknn(7)

findaccuracyminlink(3)
findaccuracyminlink(5)
findaccuracyminlink(7)

def findaccuracyminlink1(ki1):
  x=file1.iloc[:,:-1].values
  y=file1.iloc[:,-1].values
  clustno=findbestclustermin(x)
  print("a good cluster is")
  print(clustno)
  clust5=find_mincluster(x,clustno)
  print(clust5)
  avgclustpoint=[]
  for i in range(0,len(clust5)):
    clustp=[]
    for j in range(0,len(x[0])):
      a12=0
      for k in range(0,len(clust5[i])):
        kp=x[clust5[i][k]]
        kp1=kp[j]
        a12=a12+kp1
      a12=a12/len(clust5[i])
      clustp.append(a12)
    avgclustpoint.append(clustp)
  clustfeature=[]
  for i in range(0,len(avgclustpoint)):
    cluster1=[]
    for j in range(0,len(x)):
      datapoint=x[j]
      distance=0
      clustpoint=avgclustpoint[i]
      for k in range(0,len(datapoint)):
        point1=np.square(float(clustpoint[k])-float(datapoint[k]))
        distance=distance+point1
      distance=np.sqrt(distance)
      cluster1.append(distance)
    clustfeature.append(cluster1)
  clustfeature1=[]
  for i in range(0,len(x)):
    clust123=[]
    for j in range(0,len(clustfeature)):
      uv=clustfeature[j][i]
      clust123.append(uv)
    clustfeature1.append(clust123)
  yclust5=[]
  for i in range(0,len(x)):
    kp1=predict1(x,clustfeature1,i,y,ki1)
    yclust5.append(kp1)
  yclust5=np.asarray(yclust5)
  print("actutal y")
  print(y)
  print("predicted y")
  print(yclust5)
  count1=0
  for i in range(0,len(y)):
    if y[i]==yclust5[i]:
      count1=count1+1
  accuracy1=float(count1)/float(len(y))
  print("accuracy for "+str(clustno)+" cluster") 
  print(accuracy1)
  print(" ")

findaccuracyminlink1(3)
findaccuracyminlink1(5)
findaccuracyminlink1(7)

def find_maxcluster_matrix(matrix_x):
  if np.min(matrix_x)==100000.0:
    print("no more cluster possible")
  else:
    cluster=np.where(matrix_x==np.min(matrix_x))
    cluster=np.squeeze(cluster)
    cluster=np.sort(cluster)
    ar1=list(matrix_x[cluster[0]])
    ar2=list(matrix_x[cluster[1]])
    ac1=[item[cluster[0]] for item in matrix_x]
    ac2=[item[cluster[1]] for item in matrix_x]
    for i in range(0,len(ar1)):
      if ar1[i]!=100000.0 and ar2[i]!=100000.0:
        mini=[]
        mini.append(ar1[i])
        mini.append(ar2[i])
        ar1[i]=max(mini)
    for i in range(0,len(ar1)):
      if ac1[i]!=100000.0 and ar2[i]!=100000.0:
        mini=[]
        mini.append(ac1[i])
        mini.append(ar2[i])
        ac1[i]=max(mini)
    for i in range(0,len(ar1)):
      if ac1[i]!=100000.0 and ac2[i]!=100000.0:
        mini=[]
        mini.append(ac1[i])
        mini.append(ac2[i])
        ac1[i]=max(mini)
    for i in range(0,len(ar1)):
      matrix_x[cluster[1],i]=100000.0
    for i in range(0,len(ac1)):
      matrix_x[i,cluster[1]]=100000.0
    kp=ac1[cluster[1]]
    for i in range(0,len(ac1)):
      if ac1[i]==kp:
        ac1[i]=100000.0
    for i in range(0,len(ar1)):
      matrix_x[cluster[0],i]=ar1[i]
    for i in range(0,len(ac1)):
      matrix_x[i,cluster[0]]=ac1[i]
    return matrix_x,cluster;

def find_maxcluster(x,clustno):
  clust=[]
  k=len(x)
  matrix_x=np.zeros((k,k))
  for i in range(0,len(matrix_x)):
    for j in range(0,len(matrix_x)):
      if i>j:
        matrix_x[i,j]=float(np.linalg.norm(np.array(x[i])-np.array(x[j])))
      else:
        matrix_x[i,j]=100000
  for po in range (0,len(matrix_x)-1):
    matrix_x,cluster=find_maxcluster_matrix(matrix_x)
    cluster=list(cluster)
    k1=0
    for item in clust:
      for k in range(0,len(item)):
        if item[k]==cluster[0]:
          item.append(cluster[1])
          k1=1
          break
        if item[k]==cluster[1]:
          item.append(cluster[0])
          k1=1
          break
    if k1==0:
      clust.append(cluster)
    merge=[]
    for item in clust:
      pi=0
      for k in range(0,len(item)):
        if item[k]==cluster[0] or item[k]==cluster[1]:
          pi=pi+1
      if pi==2:
        merge.append(clust.index(item))
    if len(merge)==2:
      clust[merge[0]]=clust[merge[0]]+clust[merge[1]]
      clust.remove(clust[merge[1]])
    for i in range (0,len(clust)):
      uniq1=clust[i]
      uniq1=np.asarray(uniq1)
      uniq1=np.unique(uniq1)
      clust[i]=list(uniq1)
    clno=len(matrix_x)-po-1
    if clustno==clno:
      clusti2=[]
      for item in clust:
        for i in range(0,len(item)):
          clusti2.append(item[i])
      for i in range(0,len(x)):
        k=0
        for j in range(0,len(clusti2)):
          if i==clusti2[j]:
            k=1
        if k==0:
          clust.append([i])
      return clust

def findclusteraccuracymax(clustno):
  file1=pd.read_csv("/content/seeds_dataset.txt",delim_whitespace=True,header=None)
  y=file1.iloc[:,-1].values
  clust=find_maxcluster(x,clustno)
  clustp=file1.iloc[:,-1].values
  clusted=[]
  for i in range(0,len(clust)):
    clust1=[]
    for j in range(0,len(clust[i])):
      clust1.append(y[clust[i][j]])
    clusted.append(clust1)
  vote=[]
  for i in range(0,len(clusted)):
    kg1=findmultimode(clusted[i])
    vote.append(kg1)
  for i in range(0,len(clust)):
    for j in range(0,len(clust[i])):
      clustp[clust[i][j]]=vote[i]

  count1=0
  file1=pd.read_csv("/content/seeds_dataset.txt",delim_whitespace=True,header=None)
  y=file1.iloc[:,-1].values

  for i in range(0,len(y)):
    if y[i]==clustp[i]:
      count1=count1+1
  accuracy1=float(count1)/float(len(y))
  return accuracy1

def findbestclustermax(x):
  accu=[]
  for i in range(1,len(x)):
    accu.append(findclusteraccuracymax(i))
  for i in range(0,len(accu)):
    if accu[i]>=0.9:
      return i+1
      break

def findaccuracymaxlink(ki1):
  x=file1.iloc[:,:-1].values
  y=file1.iloc[:,-1].values
  clustno=findbestclustermax(x)
  print("a good cluster is")
  print(clustno)
  clust5=find_maxcluster(x,clustno)
  avgclustpoint=[]
  for i in range(0,len(clust5)):
    clustp=[]
    for j in range(0,len(x[0])):
      a12=0
      for k in range(0,len(clust5[i])):
        kp=x[clust5[i][k]]
        kp1=kp[j]
        a12=a12+kp1
      a12=a12/len(clust5[i])
      clustp.append(a12)
    avgclustpoint.append(clustp)
  clustfeature=[]
  for i in range(0,len(avgclustpoint)):
    cluster1=[]
    for j in range(0,len(x)):
      datapoint=x[j]
      distance=0
      clustpoint=avgclustpoint[i]
      for k in range(0,len(datapoint)):
        point1=np.square(float(clustpoint[k])-float(datapoint[k]))
        distance=distance+point1
      distance=np.sqrt(distance)
      cluster1.append(distance)
    clustfeature.append(cluster1)
  clustfeature1=[]
  for i in range(0,len(x)):
    clust123=[]
    for j in range(0,len(clustfeature)):
      uv=clustfeature[j][i]
      clust123.append(uv)
    clustfeature1.append(clust123)
  split1=len(file1)-30
  clustfeaturetrain1=clustfeature1[:split1]
  clustfeaturetest1=clustfeature1[split1:]
  x=file1.iloc[:split1,:-1].values
  y=file1.iloc[:split1,-1].values
  x_test=file1.iloc[split1:,:-1].values
  y_test=file1.iloc[split1:,-1].values
  yclust5=[]
  for i in range(0,len(x_test)):
    kp1=predict2(x,clustfeaturetrain1,list(x_test[i]),clustfeaturetest1[i],y,ki1)
    yclust5.append(kp1)
  yclust5=np.asarray(yclust5)
  print("actutal y")
  print(y_test)
  print("predicted y")
  print(yclust5)
  count1=0
  for i in range(0,len(y_test)):
    if y_test[i]==yclust5[i]:
      count1=count1+1
  accuracy1=float(count1)/float(len(y_test))
  print("accuracy for "+str(clustno)+" cluster") 
  print(accuracy1)
  print(" ")

findknn(3)
findknn(5)
findknn(7)

findaccuracymaxlink(3)
findaccuracymaxlink(5)
findaccuracymaxlink(7)

def findaccuracymaxlink1(ki1):
  x=file1.iloc[:,:-1].values
  y=file1.iloc[:,-1].values
  clustno=findbestclustermax(x)
  print("a good cluster is")
  print(clustno)
  clust5=find_maxcluster(x,clustno)
  print(clust5)
  avgclustpoint=[]
  for i in range(0,len(clust5)):
    clustp=[]
    for j in range(0,len(x[0])):
      a12=0
      for k in range(0,len(clust5[i])):
        kp=x[clust5[i][k]]
        kp1=kp[j]
        a12=a12+kp1
      a12=a12/len(clust5[i])
      clustp.append(a12)
    avgclustpoint.append(clustp)
  clustfeature=[]
  for i in range(0,len(avgclustpoint)):
    cluster1=[]
    for j in range(0,len(x)):
      datapoint=x[j]
      distance=0
      clustpoint=avgclustpoint[i]
      for k in range(0,len(datapoint)):
        point1=np.square(float(clustpoint[k])-float(datapoint[k]))
        distance=distance+point1
      distance=np.sqrt(distance)
      cluster1.append(distance)
    clustfeature.append(cluster1)
  clustfeature1=[]
  for i in range(0,len(x)):
    clust123=[]
    for j in range(0,len(clustfeature)):
      uv=clustfeature[j][i]
      clust123.append(uv)
    clustfeature1.append(clust123)
  yclust5=[]
  for i in range(0,len(x)):
    kp1=predict1(x,clustfeature1,i,y,ki1)
    yclust5.append(kp1)
  yclust5=np.asarray(yclust5)
  print("actutal y")
  print(y)
  print("predicted y")
  print(yclust5)
  count1=0
  for i in range(0,len(y)):
    if y[i]==yclust5[i]:
      count1=count1+1
  accuracy1=float(count1)/float(len(y))
  print("accuracy for "+str(clustno)+" cluster") 
  print(accuracy1)
  print(" ")

findaccuracymaxlink1(3)
findaccuracymaxlink1(5)
findaccuracymaxlink1(7)

